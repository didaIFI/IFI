<?php

class ProjectController extends Controller
{
	/**
	 * @var string the default layout for the views. Defaults to '//layouts/column2', meaning
	 * using two-column layout. See 'protected/views/layouts/column2.php'.
	 */
	public $layout='//layouts/column2';

	/**
	 * @return array action filters
	 */
	public function filters()
	{
		return array(
			'accessControl', // perform access control for CRUD operations
			'postOnly + delete', // we only allow deletion via POST request
		);
	}

	/**
	 * Specifies the access control rules.
	 * This method is used by the 'accessControl' filter.
	 * @return array access control rules
	 */
	public function accessRules()
	{
		return array(
			array('allow',  // allow all users to perform 'index' and 'view' actions
				'actions'=>array('index','view', 'refresh', 'docking'),
				'users'=>array('*'),
			),
			array('allow', // allow authenticated user to perform 'create' and 'update' actions
				'actions'=>array('create','update'),
				'users'=>array('*'),
			),
			array('allow', // allow admin user to perform 'admin' and 'delete' actions
				'actions'=>array('admin','delete'),
				'users'=>array('*'),
			),
			array('deny',  // deny all users
				'users'=>array('*'),
			),
		);
	}

	/**
	 * Displays a particular model.
	 * @param integer $id the ID of the model to be displayed
	 */
	public function actionView($id)
	{
		$this->render('view',array(
			'model'=>$this->loadModel($id),
		));
	}

	/**
	 * Creates a new model.
	 * If creation is successful, the browser will be redirected to the 'view' page.
	 */
	public function actionCreate()
	{
            $cats = Protein::model()->findAll();
            $count_cats = count($cats);
            if($count_cats > 0){
                $arr_category = array();
                foreach($cats as $cat)
                    array_push($arr_category,$cat->attributes);
            }
            
            $allLigand = Ligand::model()->findAll();
            $count_Ligand = count($allLigand);
            if($count_Ligand > 0){
                $arr_Ligand = array();
                foreach($allLigand as $cat)
                    array_push($arr_Ligand,$cat->attributes);
            }
            
            
//		$model=new Project;
//
//		// Uncomment the following line if AJAX validation is needed
//		// $this->performAjaxValidation($model);
//
//		if(isset($_POST['Project']))
//		{
//			$model->attributes=$_POST['Project'];
//			if($model->save())
//				$this->redirect(array('view','id'=>$model->project_id));
//		}

		$this->render('create'
                        ,array('modelProtein'=>$arr_category, 'modelLigand'=>$arr_Ligand,)
                );
	}

	/**
	 * Updates a particular model.
	 * If update is successful, the browser will be redirected to the 'view' page.
	 * @param integer $id the ID of the model to be updated
	 */
	public function actionUpdate($id)
	{
		$model=$this->loadModel($id);

		// Uncomment the following line if AJAX validation is needed
		// $this->performAjaxValidation($model);

		if(isset($_POST['Project']))
		{
			$model->attributes=$_POST['Project'];
			if($model->save())
				$this->redirect(array('view','id'=>$model->project_id));
		}

		$this->render('update',array(
			'model'=>$model,
		));
	}

	/**
	 * Deletes a particular model.
	 * If deletion is successful, the browser will be redirected to the 'admin' page.
	 * @param integer $id the ID of the model to be deleted
	 */
	public function actionDelete($id)
	{
		$this->loadModel($id)->delete();

		// if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser
		if(!isset($_GET['ajax']))
			$this->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin'));
	}

	/**
	 * Lists all models.
	 */
	public function actionIndex()
	{
		$dataProvider=new CActiveDataProvider('Project');
		$this->render('index',array(
			'dataProvider'=>$dataProvider,
		));
	}

	/**
	 * Manages all models.
	 */
	public function actionAdmin()
	{
            
            
            
		$model=new Project('search');
		$model->unsetAttributes();  // clear any default values
		if(isset($_GET['Project']))
			$model->attributes=$_GET['Project'];

		$this->render('admin',array(
			'model'=>$model,
		));
	}
        // post ajax refresh project
        public function actionRefresh($id)
        {
//            $mydockingws = new dockingws();
            
//            $paramWaiting = new getProjectInfoWaiting($id);
//            $paramRunning = new getProjectInfoRunning($id);
//            $paramComplete = new getProjectInfoCompleted($id);
//            $paramFailed = new getProjectInfoFailed($id);
//            
//            $resWaiting = $mydockingws->getProjectInfoWaiting($paramWaiting);
//            $resRunning = $mydockingws->getProjectInfoRunning($paramRunning);
//            $resComplete = $mydockingws->getProjectInfoCompleted($paramComplete);
//            $resFailed = $mydockingws->getProjectInfoFailed($paramFailed);
            
            $model=$this->loadModel($id);
            $model->waiting_job = 1000;
            if($model->save())
                echo 'success';
            else
                echo 'failed';
            
//            echo $id;
        }
        // post ajax docking
        public function actionDocking()
        {
            
            
            $pathToFolderTmp = '../first_yii/tmp_param/';
            $contentFile = file_get_contents($pathToFolderTmp.'Lanmarkine genetic algorithm.dpf');
            $contentFile = str_replace('ga_run_value', '500', $contentFile);
//            $rootPathServer = $_SERVER['SCRIPT_FILENAME'];
            
            
            $userName = Yii::app()->user->name;
            $newFile = $userName.'_'.time().'.dpf';
            file_put_contents($pathToFolderTmp.$newFile,$contentFile);
            
            echo $_POST['ht'];
//            echo 'success';
            
        }

        /**
	 * Returns the data model based on the primary key given in the GET variable.
	 * If the data model is not found, an HTTP exception will be raised.
	 * @param integer $id the ID of the model to be loaded
	 * @return Project the loaded model
	 * @throws CHttpException
	 */
	public function loadModel($id)
	{
		$model=Project::model()->findByPk($id);
		if($model===null)
			throw new CHttpException(404,'The requested page does not exist.');
		return $model;
	}

	/**
	 * Performs the AJAX validation.
	 * @param Project $model the model to be validated
	 */
	protected function performAjaxValidation($model)
	{
		if(isset($_POST['ajax']) && $_POST['ajax']==='project-form')
		{
			echo CActiveForm::validate($model);
			Yii::app()->end();
		}
	}
}
